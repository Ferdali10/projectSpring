@Library('dig-apps-shared-lib') _

pipeline {
    agent any

    environment {
        // Configurations de base
        DB_URL = 'jdbc:mysql://192.168.11.100:3306/springfoyer'
        DB_USER = credentials('mysql-username')
        DB_PASSWORD = credentials('mysql-password')
        
        // Configuration SonarQube
        SONAR_PROJECT_KEY = 'springfoyer'
        SONAR_PROJECT_NAME = 'springFoyer'
        
        // Configuration Trivy
        TRIVY_TEMPLATE_URL = 'https://raw.githubusercontent.com/Ferdali10/projectSpring/master/advanced-html.tpl'
        
        // Optimisation Maven
        MAVEN_OPTS = '-Dmaven.wagon.http.retryHandler.count=5 -Dmaven.wagon.http.connectionTimeout=300000 -Dmaven.wagon.http.readTimeout=300000'
    }

    stages {
        /* ---------------------------- */
        /* √âTAPE 1 : PR√âPARATION */
        /* ---------------------------- */
        stage('üîß Pr√©paration') {
            steps {
                script {
                    cleanWs()
                    cloneRepo(
                        repoUrl: "https://github.com/Ferdali10/projectSpring.git",
                        branch: "master",
                        credentialsId: "github-pat"
                    )
                    
                    // V√©rification et correction des permissions
                    sh """
                        echo "V√©rification des permissions..."
                        ls -la ./mvnw || echo "mvnw non trouv√©"
                        
                        # Correction des permissions pour mvnw
                        if [ -f ./mvnw ]; then
                            chmod +x ./mvnw
                            echo "Permissions corrig√©es pour mvnw"
                        else
                            echo "Fichier mvnw non trouv√©, utilisation de maven syst√®me"
                        fi
                        
                        # V√©rification de l'environnement
                        java -version
                        echo "JAVA_HOME: $JAVA_HOME"
                        echo "PATH: $PATH"
                    """
                }
            }
        }

        /* ---------------------------- */
        /* √âTAPE 2 : BUILD MAVEN */
        /* ---------------------------- */
        stage('üõ†Ô∏è Build Maven') {
            steps {
                script {
                    try {
                        // Utilisation de Maven avec fallback
                        sh """
                            # Tentative avec mvnw en premier
                            if [ -f ./mvnw ] && [ -x ./mvnw ]; then
                                echo "Utilisation de Maven Wrapper"
                                ./mvnw clean package \\
                                -DskipTests \\
                                -Dspring.profiles.active=prod \\
                                -B -V -e
                            else
                                echo "Utilisation de Maven syst√®me"
                                mvn clean package \\
                                -DskipTests \\
                                -Dspring.profiles.active=prod \\
                                -B -V -e
                            fi
                        """
                        
                        // V√©rification du JAR g√©n√©r√©
                        sh """
                            echo "V√©rification du build..."
                            ls -la target/
                            
                            # Recherche du JAR g√©n√©r√©
                            JAR_FILE=\$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
                            if [ -z "\$JAR_FILE" ]; then
                                echo "‚ùå Aucun fichier JAR trouv√© dans target/"
                                exit 1
                            else
                                echo "‚úÖ JAR trouv√© : \$JAR_FILE"
                                # Cr√©ation d'un lien symbolique pour simplifier la r√©f√©rence
                                ln -sf \$JAR_FILE target/app.jar
                            fi
                        """
                        
                    } catch (Exception e) {
                        echo "‚ùå Erreur lors du build Maven : ${e.getMessage()}"
                        // Archivage des logs pour debug
                        sh """
                            echo "Collecte des logs de debug..."
                            find . -name "*.log" -type f -exec ls -la {} \\;
                            find . -name "surefire-reports" -type d -exec ls -la {} \\;
                        """
                        archiveArtifacts artifacts: '**/target/*.log,**/target/surefire-reports/*', allowEmptyArchive: true
                        throw e
                    }
                }
            }
        }

        /* ---------------------------- */
        /* √âTAPE 3 : ANALYSE SONARQUBE */
        /* ---------------------------- */
        stage('üìä Analyse SonarQube') {
            steps {
                script {
                    try {
                        withSonarQubeEnv('SonanQubeServer') {
                            withCredentials([string(credentialsId: 'jenkins-key', variable: 'SONAR_TOKEN')]) {
                                sh """
                                    # Utilisation de Maven avec fallback
                                    if [ -f ./mvnw ] && [ -x ./mvnw ]; then
                                        ./mvnw sonar:sonar \\
                                        -Dsonar.login=\$SONAR_TOKEN \\
                                        -Dsonar.projectKey=${env.SONAR_PROJECT_KEY} \\
                                        -Dsonar.projectName="${env.SONAR_PROJECT_NAME}" \\
                                        -Dsonar.sources=src/main/java \\
                                        -Dsonar.tests=src/test/java \\
                                        -Dsonar.java.binaries=target/classes \\
                                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                                    else
                                        mvn sonar:sonar \\
                                        -Dsonar.login=\$SONAR_TOKEN \\
                                        -Dsonar.projectKey=${env.SONAR_PROJECT_KEY} \\
                                        -Dsonar.projectName="${env.SONAR_PROJECT_NAME}" \\
                                        -Dsonar.sources=src/main/java \\
                                        -Dsonar.tests=src/test/java \\
                                        -Dsonar.java.binaries=target/classes \\
                                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                                    fi
                                """
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Erreur SonarQube : ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        /* ---------------------------- */
        /* √âTAPE 4 : QUALITY GATE */
        /* ---------------------------- */
        stage('üõÇ V√©rification Quality Gate') {
            steps {
                script {
                    try {
                        timeout(time: 5, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                echo "‚ö†Ô∏è Quality Gate √©chou√©e : ${qg.status}"
                                currentBuild.result = 'UNSTABLE'
                            } else {
                                echo "‚úÖ Quality Gate r√©ussie"
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Erreur Quality Gate : ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        /* ---------------------------- */
        /* √âTAPE 5 : BUILD DOCKER */
        /* ---------------------------- */
        stage('üê≥ Build Docker') {
            steps {
                script {
                    try {
                        // V√©rification du Dockerfile
                        sh """
                            if [ ! -f Dockerfile ]; then
                                echo "‚ùå Dockerfile non trouv√©"
                                exit 1
                            fi
                            
                            # V√©rification du JAR
                            if [ ! -f target/app.jar ]; then
                                echo "‚ùå JAR non trouv√©"
                                exit 1
                            fi
                            
                            echo "‚úÖ Pr√©requis Docker OK"
                        """
                        
                        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-creds') {
                            def image = docker.build("dalifer/springfoyer:${env.BUILD_NUMBER}", ".")
                            image.push()
                            image.push('latest')
                            
                            echo "‚úÖ Image Docker publi√©e : dalifer/springfoyer:${env.BUILD_NUMBER}"
                        }
                    } catch (Exception e) {
                        echo "‚ùå Erreur lors du build Docker : ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }

        /* ---------------------------- */
        /* √âTAPE 6 : ANALYSE TRIVY */
        /* ---------------------------- */
        stage('üîç Analyse Trivy') {
            steps {
                script {
                    try {
                        // T√©l√©chargement DB et template
                        sh """
                            echo "Pr√©paration de l'analyse Trivy..."
                            
                            # T√©l√©chargement de la base de donn√©es Trivy
                            trivy image --download-db-only
                            
                            # T√©l√©chargement du template
                            curl -sLO ${env.TRIVY_TEMPLATE_URL} || echo "Template non disponible"
                            
                            # Renommage du template si disponible
                            if [ -f advanced-html.tpl ]; then
                                mv advanced-html.tpl html.tpl
                                echo "Template HTML configur√©"
                            else
                                echo "Utilisation du template par d√©faut"
                            fi
                        """

                        // Analyse de s√©curit√©
                        sh """
                            echo "Analyse de s√©curit√© avec Trivy..."
                            
                            # Analyse avec gestion d'erreur
                            trivy image \\
                            --scanners vuln \\
                            --severity HIGH,CRITICAL \\
                            --ignore-unfixed \\
                            --format template \\
                            --template '@html.tpl' \\
                            -o trivy-report.html \\
                            dalifer/springfoyer:latest || echo "Analyse Trivy termin√©e avec des avertissements"
                            
                            # V√©rification du rapport
                            if [ -f trivy-report.html ]; then
                                echo "‚úÖ Rapport Trivy g√©n√©r√©"
                            else
                                echo "‚ö†Ô∏è Rapport Trivy non g√©n√©r√©"
                            fi
                        """

                        // Publication du rapport
                        publishHTML([
                            allowMissing: true,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: '.',
                            reportFiles: 'trivy-report.html',
                            reportName: 'Rapport Trivy',
                            reportTitles: 'Analyse de S√©curit√©'
                        ])
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Erreur lors de l'analyse Trivy : ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üßπ Nettoyage post-build..."
                
                // Nettoyage Docker
                sh """
                    echo "Nettoyage Docker..."
                    docker system prune -f || echo "Erreur lors du nettoyage Docker"
                """
                
                // Nettoyage des fichiers temporaires
                sh """
                    echo "Nettoyage des fichiers temporaires..."
                    rm -f html.tpl trivy-report.* || echo "Fichiers temporaires d√©j√† supprim√©s"
                """
                
                // Affichage du statut
                def buildStatus = currentBuild.currentResult
                echo "üìä Statut final du build : ${buildStatus}"
                
                // Informations sur l'espace disque
                sh """
                    echo "Informations syst√®me :"
                    df -h . || echo "Impossible d'afficher l'espace disque"
                """
            }
        }
        
        success {
            script {
                echo "üéâ Pipeline r√©ussi avec succ√®s !"
                echo "‚úÖ Build ${env.JOB_NAME} #${env.BUILD_NUMBER} termin√©"
                
                // Informations sur les artefacts
                sh """
                    echo "Artefacts g√©n√©r√©s :"
                    ls -la target/*.jar || echo "Aucun JAR trouv√©"
                    docker images | grep dalifer/springfoyer || echo "Aucune image Docker trouv√©e"
                """
            }
        }
        
        failure {
            script {
                echo "‚ùå Pipeline √©chou√©"
                echo "üîç Build ${env.JOB_NAME} #${env.BUILD_NUMBER} a √©chou√©"
                
                // Archivage des logs pour debug
                archiveArtifacts artifacts: '**/target/*.log,**/target/surefire-reports/*,**/logs/*', allowEmptyArchive: true
                
                // Informations de debug
                sh """
                    echo "Informations de debug :"
                    pwd
                    ls -la
                    ls -la target/ || echo "R√©pertoire target non trouv√©"
                """
            }
        }
        
        unstable {
            script {
                echo "‚ö†Ô∏è Pipeline instable"
                echo "üîß Build ${env.JOB_NAME} #${env.BUILD_NUMBER} termin√© avec des avertissements"
                
                // Archivage des logs
                archiveArtifacts artifacts: '**/target/*.log,**/target/surefire-reports/*', allowEmptyArchive: true
            }
        }
    }
}







