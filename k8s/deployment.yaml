# ----- PersistentVolume pour MySQL -----
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  hostPath:
    path: /mnt/data/mysql

---

# ----- Secret MySQL -----
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
stringData:
  username: root
  password: Med200010*

---

# ----- Service MySQL (headless pour StatefulSet) -----
apiVersion: v1
kind: Service
metadata:
  name: springfoyer-mysql
spec:
  clusterIP: None
  selector:
    app: springfoyer-mysql
  ports:
    - port: 3306
      targetPort: 3306

---

# ----- StatefulSet MySQL -----
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: springfoyer-mysql
spec:
  serviceName: "springfoyer-mysql"
  replicas: 1
  selector:
    matchLabels:
      app: springfoyer-mysql
  template:
    metadata:
      labels:
        app: springfoyer-mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
            - name: MYSQL_DATABASE
              value: springfoyer
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
          # Ajout de health checks
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - mysql
                - -h
                - localhost
                - -u
                - root
                - -p$(MYSQL_ROOT_PASSWORD)
                - -e
                - "SELECT 1"
            initialDelaySeconds: 5
            periodSeconds: 2
  volumeClaimTemplates:
    - metadata:
        name: mysql-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: manual
        resources:
          requests:
            storage: 10Gi

---

# ----- Spring Boot Deployment -----
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springfoyer-deployment
  labels:
    app: springfoyer
spec:
  replicas: 3
  selector:
    matchLabels:
      app: springfoyer
  template:
    metadata:
      labels:
        app: springfoyer
    spec:
      initContainers:
        - name: wait-for-mysql
          image: busybox:1.35
          command:
            - sh
            - -c
            - |
              echo "Waiting for MySQL..."
              until nc -z springfoyer-mysql 3306; do
                echo "MySQL not ready yet..."
                sleep 5
              done
              echo "MySQL is up!"
      containers:
        - name: springfoyer
          image: dalifer/springfoyer:latest
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:mysql://springfoyer-mysql:3306/springfoyer?useSSL=false&allowPublicKeyRetrieval=true"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"
            - name: SPRING_JPA_SHOW_SQL
              value: "false"
            - name: SPRING_JPA_GENERATE_DDL
              value: "false"
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT
              value: "org.hibernate.dialect.MySQLDialect"
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "health,info,prometheus,metrics"
            - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
              value: "always"
            - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
              value: "true"
          # Ajout de health checks
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
          # Ajout de resource limits
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"

---

# ----- Spring Boot Service (pour Ingress et accès direct) -----
apiVersion: v1
kind: Service
metadata:
  name: springfoyer-service
spec:
  selector:
    app: springfoyer
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      nodePort: 30080  # Port fixe pour NodePort
  type: NodePort  # Changé pour permettre l'accès direct

---

# ----- Horizontal Pod Autoscaler -----
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: springfoyer-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: springfoyer-deployment
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60

---

# ----- Ingress pour Accès Externe -----
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: springfoyer-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-forwarded-headers: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: springfoyer-service
            port:
              number: 8080
      - path: /actuator
        pathType: Prefix
        backend:
          service:
            name: springfoyer-service
            port:
              number: 8080

---

# ----- ConfigMap pour configuration additionnelle (optionnel) -----
apiVersion: v1
kind: ConfigMap
metadata:
  name: springfoyer-config
data:
  application.properties: |
    spring.datasource.url=jdbc:mysql://springfoyer-mysql:3306/springfoyer?useSSL=false&allowPublicKeyRetrieval=true
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.show-sql=false
    management.endpoints.web.exposure.include=health,info,prometheus,metrics
    management.endpoint.health.show-details=always








