# ----- PersistentVolume pour MySQL -----
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  hostPath:
    path: /mnt/data/mysql

---

# ----- Secret MySQL -----
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
stringData:
  username: root
  password: Med200010*

---

# ----- Service MySQL (headless pour StatefulSet) -----
apiVersion: v1
kind: Service
metadata:
  name: springfoyer-mysql
spec:
  clusterIP: None
  selector:
    app: springfoyer-mysql
  ports:
    - port: 3306
      targetPort: 3306

---

# ----- Service ClusterIP MySQL pour Spring Boot -----
apiVersion: v1
kind: Service
metadata:
  name: springfoyer-mysql-access
spec:
  selector:
    app: springfoyer-mysql
  ports:
    - port: 3306
      targetPort: 3306
  type: ClusterIP

---

# ----- StatefulSet MySQL -----
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: springfoyer-mysql
spec:
  serviceName: "springfoyer-mysql"
  replicas: 1
  selector:
    matchLabels:
      app: springfoyer-mysql
  template:
    metadata:
      labels:
        app: springfoyer-mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
            - name: MYSQL_DATABASE
              value: springfoyer
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
                - -u
                - root
                - -p$(MYSQL_ROOT_PASSWORD)
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - mysql
                - -h
                - localhost
                - -u
                - root
                - -p$(MYSQL_ROOT_PASSWORD)
                - -e
                - SELECT 1
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
  volumeClaimTemplates:
    - metadata:
        name: mysql-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: manual
        resources:
          requests:
            storage: 10Gi

---

# ----- MySQL Exporter pour Prometheus avec configuration corrigée -----
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysqld-exporter
  labels:
    app: mysqld-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysqld-exporter
  template:
    metadata:
      labels:
        app: mysqld-exporter
    spec:
      containers:
        - name: mysqld-exporter
          image: prom/mysqld-exporter:v0.15.0
          env:
            - name: DATA_SOURCE_NAME
              value: "root:Med200010*@tcp(springfoyer-mysql-access:3306)/"
            - name: MYSQLD_EXPORTER_WEB_LISTEN_ADDRESS
              value: ":9104"
            - name: MYSQLD_EXPORTER_WEB_TELEMETRY_PATH
              value: "/metrics"
          ports:
            - name: metrics
              containerPort: 9104
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi

---

# ----- Service MySQL Exporter -----
apiVersion: v1
kind: Service
metadata:
  name: mysqld-exporter
  labels:
    app: mysqld-exporter
spec:
  selector:
    app: mysqld-exporter
  ports:
    - name: metrics
      port: 9104
      targetPort: 9104
      protocol: TCP
  type: ClusterIP

---

# ----- Spring Boot Deployment avec configuration Prometheus -----
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springfoyer-deployment
  labels:
    app: springfoyer
spec:
  replicas: 3
  selector:
    matchLabels:
      app: springfoyer
  template:
    metadata:
      labels:
        app: springfoyer
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      initContainers:
        - name: wait-for-mysql
          image: busybox:1.35
          command:
            - sh
            - -c
            - |
              echo "Waiting for MySQL..."
              until nc -z springfoyer-mysql-access 3306; do
                echo "MySQL not ready yet..."
                sleep 5
              done
              echo "MySQL is up!"
      containers:
        - name: springfoyer
          image: dalifer/springfoyer:latest
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:mysql://springfoyer-mysql-access:3306/springfoyer"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"
            - name: SPRING_JPA_SHOW_SQL
              value: "false"
            - name: SPRING_JPA_GENERATE_DDL
              value: "false"
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT
              value: "org.hibernate.dialect.MySQLDialect"
            # Configuration Actuator pour monitoring
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "health,info,prometheus,metrics"
            - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
              value: "always"
            - name: MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED
              value: "true"
            - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
              value: "true"
            - name: MANAGEMENT_SERVER_PORT
              value: "8080"
            - name: MANAGEMENT_ENDPOINTS_WEB_BASE_PATH
              value: "/actuator"
            # Configuration JVM pour métriques
            - name: JAVA_OPTS
              value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Dmanagement.security.enabled=false"
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 30
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi

---

# ----- Spring Boot Service -----
apiVersion: v1
kind: Service
metadata:
  name: springfoyer-service
  labels:
    app: springfoyer
spec:
  selector:
    app: springfoyer
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  type: LoadBalancer

---

# ----- ConfigMap pour configuration Grafana avec datasource Prometheus -----
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service.monitoring.svc.cluster.local:9090
        isDefault: true
        editable: true

---

# ----- HorizontalPodAutoscaler pour Spring Boot -----
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: springfoyer-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: springfoyer-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80












