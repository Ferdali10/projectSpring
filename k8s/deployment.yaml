# ----- PersistentVolume pour MySQL -----
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  hostPath:
    path: /mnt/data/mysql

---

# ----- Secret MySQL -----
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
stringData:
  username: root
  password: Med200010*

---

# ----- Service MySQL (headless pour StatefulSet) -----
apiVersion: v1
kind: Service
metadata:
  name: springfoyer-mysql
spec:
  clusterIP: None
  selector:
    app: springfoyer-mysql
  ports:
    - port: 3306
      targetPort: 3306

---

# ----- StatefulSet MySQL -----
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: springfoyer-mysql
spec:
  serviceName: "springfoyer-mysql"
  replicas: 1
  selector:
    matchLabels:
      app: springfoyer-mysql
  template:
    metadata:
      labels:
        app: springfoyer-mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
            - name: MYSQL_DATABASE
              value: springfoyer
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
  volumeClaimTemplates:
    - metadata:
        name: mysql-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: manual
        resources:
          requests:
            storage: 10Gi

---

# ----- Spring Boot Deployment -----
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springfoyer-deployment
  labels:
    app: springfoyer
spec:
  replicas: 3
  selector:
    matchLabels:
      app: springfoyer
  template:
    metadata:
      labels:
        app: springfoyer
    spec:
      initContainers:
        - name: wait-for-mysql
          image: busybox
          command:
            - sh
            - -c
            - |
              echo "Waiting for MySQL..."
              until nc -z springfoyer-mysql 3306; do
                echo "MySQL not ready yet..."
                sleep 5
              done
              echo "MySQL is up!"
      containers:
        - name: springfoyer
          image: dalifer/springfoyer:latest
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:mysql://springfoyer-mysql:3306/springfoyer"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"
            - name: SPRING_JPA_SHOW_SQL
              value: "false"
            - name: SPRING_JPA_GENERATE_DDL
              value: "false"
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT
              value: "org.hibernate.dialect.MySQLDialect"
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "health,info,prometheus,metrics"
            - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
              value: "always"
            - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
              value: "true"

---

# ----- Spring Boot Service (ClusterIP pour Ingress) -----
apiVersion: v1
kind: Service
metadata:
  name: springfoyer-service
spec:
  selector:
    app: springfoyer
  ports:
    - port: 8080
      targetPort: 8080
  type: ClusterIP  # ← Changé de LoadBalancer à ClusterIP

---

# ----- Horizontal Pod Autoscaler -----
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: springfoyer-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: springfoyer-deployment
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60

---

# ----- Ingress pour Accès Externe -----
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: springfoyer-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-forwarded-headers: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    # Configuration spécifique Azure
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"  # Optionnel pour HTTPS
spec:
  ingressClassName: nginx
  rules:
  # Accès par IP direct (sans domaine)
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: springfoyer-service
            port:
              number: 8080
      - path: /actuator
        pathType: Prefix
        backend:
          service:
            name: springfoyer-service
            port:
              number: 8080
  
  # Accès par hostname (optionnel - décommentez si vous avez un domaine)
  # - host: springfoyer.yourdomain.com
  #   http:
  #     paths:
  #     - path: /
  #       pathType: Prefix
  #       backend:
  #         service:
  #           name: springfoyer-service
  #           port:
  #             number: 8080

  # tls:  # Décommentez pour HTTPS
  # - hosts:
  #   - springfoyer.yourdomain.com
  #   secretName: springfoyer-tls








